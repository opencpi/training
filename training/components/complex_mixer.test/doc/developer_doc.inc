%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% this file was generated by docGen.py
% this file is intended to be edited
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section*{Summary - \Comp}
% Make table whose width is equal to which will be used for text
% wrapping, split into 2 equal columns
\begin{longtable}{|p{\dimexpr0.5\textwidth-2\tabcolsep\relax}
                  |p{\dimexpr0.5\textwidth-2\tabcolsep\relax}|}
  \hline
  \rowcolor{blue}
  & \\
  \hline
  Name              & \comp \\
  \hline
  Latest Version    &  \docVersion \space (4/2019) \\
  \hline
  Worker Type       &  Application \\
  \hline
  Component Library &  ocpi.training.components \\
  \hline
  Workers           &  \comp.hdl \comp.rcc \\
  \hline
  Tested Platforms  & c7-x86\_64, linux-x13\_3-arm, linux-x13\_4-arm, xsim, Matchstiq-Z1(PL)(Vivado 2017.1), Ettus E310(PL)\\
  \hline
\end{longtable}

\begin{center}
	\textit{\textbf{Revision History}}
	\begin{table}[H]
	\label{table:revisions} % Add "[H]" to force placement of table
		\begin{tabularx}{\textwidth}{|c|X|l|}
		\hline
		\rowcolor{blue}
		\textbf{Revision} & \textbf{Description of Change} & \textbf{Date} \\
		\hline
		v1.2 & & 8/2017 \\
		\hline
		v1.3 & & 2/2018 \\
		\hline
		v1.4 & & 10/2018 \\
		\hline
		v1.5 & Convert Worker to Version 2 HDL API & 4/2019\\
		\hline
		\end{tabularx}
	\end{table}
\end{center}

\section*{Functionality}
\begin{flushleft}
The Complex Mixer consists of a Numerically Controlled Oscillator (NCO) and a complex multiplier. Complex IQ data is received on the input port and is multiplied with the output of the NCO and put on the output port.
\end{flushleft}

\section*{Worker Implementation Details}
\begin{flushleft}
\subsection*{\comp.hdl}
\begin{flushleft}
	Figure \ref{fig:complex_mixer} diagrams the complex mixer.\medskip

	\begin{figure}[h]
		\centering\captionsetup{type=figure}\includegraphics[scale=0.4]{complex_mixer_block_diagram}
		\captionof{figure}{Complex Mixer Functional Diagram}
		\label{fig:complex_mixer}
	\end{figure}

	The control properties for all implementations provide the ability to \textit{enable}(or bypass) the worker and set the tune frequency via \textit{phs\_inc}.\medskip

	The HDL worker leverages Xilinx Vivado cores to implement the NCO (DDS Compiler v6.0.13) and complex multiply (Complex Multiplier v6.0.12) functions. The Vivado IP Catalog tool was used to generate both cores. For both cores, their respective default configuration settings were chosen with the following exceptions:

	\begin{itemize}
		\item DDS Compiler 6.0.13 (dds\_compiler.xci)
			\subitem Parameter Selection = Hardware Parameters
			\subitem Output Width = 16
			\subitem Phase Increment Programmabililty = Streaming
			\subitem Optional Pins: Has Phase Out is unchecked and ARESETn checked
		\item Complex Multiplier v6.0.12 (complex\_multiplier.xci)
			\subitem Control Signals: ACLKEN and ARESETn checked
	\end{itemize}

	The dds\_compliler v6.0.13 implements a phase generator and sin/cos look-up tables (LUT), and has a latency of 7.  The complex\_multiplier v6.0.12 uses 3 DSP48E1s and has a latency of 6.\medskip

	In conjunction with the \textit{enable}(or bypass) control property, the HDL worker provides the ability to select different (\textit{data\_select}) data to output in bypass mode: input or output of the NCO.\medskip
\end{flushleft}
\subsection*{\comp.rcc}
\begin{flushleft}
	The RCC worker leverages liquid-dsp v1.2 and its \textit{nco} class to generate the internal NCO used in the algorithm. More information on this liquid-dsp module can be seen in the online documentation: \href{http://liquidsdr.org/doc/nco/}{liquid-dsp}.  \\
	In the RCC version of this component the samples are converted from fixed point to floating point numbers in order to do that math on a GPP. This conversion introduces a small amount of error in the output data and should be accounted for when it is used in an application.  The conversion equations are as follows:

	\begin{equation} \label{eq:iq_float}
  		iq\_float = \frac{iq\_fixed}{2^{15} -1}
	\end{equation}

    \begin{equation} \label{eq:iq_fixed}
  		iq\_fixed = {iq\_float}*(2^{15} -1)
	\end{equation}

	In the RCC worker a conversion needs to be done for the phase increment to adhere to the way the HDL phase increment is implemented.  The conversion was done in the RCC version of this component because the division operation is very resource intensive in HDL.  The conversion from the component property to the liquid-dsp interface input property is as follows:
	\begin{equation} \label{eq:rcc_phase_inc}
  		liquid\_phs\_inc = phs\_inc*\frac{2\pi}{0x7FFF*2}
	\end{equation}
\end{flushleft}
\end{flushleft}

\section*{Theory}
\begin{flushleft}
The Complex Mixer worker inputs complex signed samples and performs a complex multiply with a digital sine wave produced by an numerically controlled oscillator (NCO). The resulting output data is a frequency shifted version of the input data.\medskip

	The magnitude of the frequency shift is determined by the output frequency of the NCO, which can be calculated with the following equation:

	\begin{equation} \label{eq:nco_output_freq}
		nco\_output\_freq = sample\_freq*\frac{phs\_inc}{2^{phs\_acc\_width}}
	\end{equation}

	In this component, \verb+phs_inc+ is runtime configurable and has a data type of 16 bit signed short. \verb+phs_acc_width+ is fixed at 16. The input clock frequency is the sample rate of the samples. The amplitude of the NCO's sine wave is fixed at the full range of a signed 16 bit value.
\end{flushleft}

\section*{Block Diagrams}
\subsection*{Top level}
\begin{center}
		\begin{tikzpicture}[% List of styles applied to all, to override specify on a case-by-case
				every node/.style={
					align=center,  		% use this so that the "\\" for line break works
					minimum size=2cm	% creates space above and below text in rectangle
				},
				every edge/.style={draw,thick}
			]
			\node[rectangle,ultra thick,draw=black,fill=blue](R2){\Comp};
			\node[rectangle,draw=white,fill=white](R3)[left= of R2]{``in" \\ Signed complex samples};
			\node[rectangle,draw=white,fill=white](R4)[right= of R2]{``out" \\ Signed complex samples};
			\node[rectangle,draw=white,fill=white](R5)[above= of R2]{\verb+enable, phs_inc+\\};
			\path[->]
			(R3)edge []	node [] {} (R2)
			(R2)edge []	node [] {} (R4)
			(R2)edge []	node [] {} (R5)
			(R5)edge []	node [] {} (R2)
			;
		\end{tikzpicture}
	\end{center}
	\captionof{figure}{Complex Mixer Top Level Block Diagram}
	\label{fig:block_diagram}
\pagebreak

%\subsection*{State Machine}
%\begin{flushleft}
%\end{flushleft}

\section*{Source Dependencies}
\subsection*{\comp.rcc}
   \begin{itemize}
      \item Liquid DSP (provided with \path{opencpi} RPMs)
   \end{itemize}
\subsection*{\comp.hdl}
	\begin{itemize}
		\item training\_project/components/complex\_mixer.hdl/vivado\_ip/complex\_multiplier\_stub.vhd
		\item
training\_project/components/complex\_mixer.hdl/vivado\_ip/complex\_multiplier\_sim\_net.vhd
		\item
training\_project/components/complex\_mixer.hdl/vivado\_ip/complex\_multiplier.vho
		\item
training\_project/components/complex\_mixer.hdl/vivado\_ip/complex\_multiplier.xci
		\item
training\_project/components/complex\_mixer.hdl/vivado\_ip/complex\_multiplier.edf
		\item training\_project/components/complex\_mixer.hdl/vivado\_ip/dds\_compiler\_stub.vhd
		\item training\_project/components/complex\_mixer.hdl/vivado\_ip/dds\_compiler\_sim\_net.vhd
		\item
training\_project/components/complex\_mixer.hdl/vivado\_ip/dds\_compiler.vho
		\item
training\_project/components/complex\_mixer.hdl/vivado\_ip/dds\_compiler.xci
		\item
training\_project/components/complex\_mixer.hdl/vivado\_ip/dds\_compiler.edf
	\end{itemize}

\begin{landscape}
  \input{component_spec_properties.inc} % it is recommended to NOT remove this line

  \input{worker_properties.inc} % it is recommended to NOT remove this line

  \input{component_ports.inc} % it is recommended to NOT remove this line

  \input{worker_interfaces.inc} % it is recommended to NOT remove this line
\end{landscape}

\section*{Control Timing and Signals}
%\subsection*{\comp.hdl}
\begin{flushleft}
The Complex Mixer HDL worker uses the clock from the Control Plane and standard Control Plane signals.\medskip

	There is a startup delay for this worker. Once the input is ready and valid and the output is ready, there is a 6 clock cycle start delay (pipeline delay of complex multiplier). After this startup delay, valid output data is given 6 clock cycles after input data is taken.

	\begin{tabular}{|M{4.5cm}|M{1cm}|M{1cm}|M{1.5cm}|M{2cm}|M{1cm}|M{1cm}|M{2.5cm}|}
		\hline
		\rowcolor{blue}
		Latency         \\
		\hline
		6 clock cycles  \\
		\hline
	\end{tabular}
\end{flushleft}

\section*{Performance and Resource Utilization}
\subsubsection*{\comp.hdl}
\input{../../complex_mixer.hdl/utilization.inc}

\section*{Test and Verification}
\begin{flushleft}
Test cases are derived from the number of properties, and their respective values, as listed in the complex\_mixer-test.xml. Specifically, the \comp.rcc and \comp.hdl implementations tested, as follows:

	\begin{itemize}
		\item[1)] Bypass (RCC \& HDL): The input data is forwarded to the output port. For 				verification of this case, the output file is byte-wise compared to the input file.
		\item[2)] Normal mode (RCC \& HDL): The NCO is configured to tune the input signal to 		baseband. For verification, an FFT of the output data is performed and the max value 			of the FFT is checked to be at DC (0 Hz).
		%	\item[3)] Bypass mode/data_select=1 : NCO output is captured (HDL)
	\end{itemize}

For all cases, the input file contains a tone of 12.5 Hz sampled at 100 Hz and an amplitude of 32767.
\end{flushleft}
