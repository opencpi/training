%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% this file was generated by docGen.py
% this file is intended to be edited
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section*{Summary - \Comp}
% Make table whose width is equal to which will be used for text
% wrapping, split into 2 equal columns
\begin{longtable}{|p{\dimexpr0.5\textwidth-2\tabcolsep\relax}
                  |p{\dimexpr0.5\textwidth-2\tabcolsep\relax}|}
  \hline
  \rowcolor{blue}
  & \\
  \hline
  Name              & \comp \\
  \hline
  Latest Version    &  \docVersion (4/2019) \\
  \hline
  Worker Type       &  Application \\
  \hline
  Component Library &  ocpi.training.components \\
  \hline
  Workers           &  \comp.hdl\\
  \hline
  Tested Platforms  &  xsim, isim, Matchstiq-Z1(PL)(Vivado 2017.1 and ISE 14.7), Ettus E310(PL) \\
  \hline
\end{longtable}

\begin{center}
	\textit{\textbf{Revision History}}
	\begin{table}[H]
	\label{table:revisions} % Add "[H]" to force placement of table
		\begin{tabularx}{\textwidth}{|c|X|l|}
		\hline
		\rowcolor{blue}
		\textbf{Revision} & \textbf{Description of Change} & \textbf{Date} \\
		\hline
		v1.1 & & 3/2017 \\
		\hline
		v1.3 & & 2/2018 \\
		\hline
		v1.4 & & 10/2018 \\
		\hline
		v1.5 & Convert Worker to Version 2 HDL API & 4/2019\\
		\hline
		\end{tabularx}
	\end{table}
\end{center}

\section*{Functionality}
\begin{flushleft}
The Automatic Gain Control (AGC) Complex component inputs complex signed samples, drives the amplitude of both I and Q input rails to a reference level, and outputs complex signed samples.

{\centering\captionsetup{type=figure}\includegraphics[scale=0.5]{agc_matlab}\par\captionof{figure}{MATLAB AGC implementation with ref=0x1B26 and mu=0x144E}\label{fig:ideal}}
\end{flushleft}

\section*{Worker Implementation Details}
\subsection*{\comp.hdl}
\begin{flushleft}
	The response time and output level of the circuit are programmable, as is the ability to update/hold the gain differential used in the feedback loop. The size of the averaging window used for peak detection is build-time programmable using the \verb+avg_window+ parameter, which is recommended to be a power-of-two to enable hardware division implementation with shift registers.\medskip

	The \verb+ref+ property controls the desired output amplitude, while the \verb+mu+ property controls the AGC time constant, thus determining the response time of the circuit.\medskip

	This implementation uses three multipliers per I/Q rail to process input data at the clock rate - i.e. this worker can handle a new input value every clock cycle. This circuit will produce output one clock cycle after each valid input, but the input-to-output latency is actually three valid clock cycles.\medskip

	The {\Comp} worker utilizes the OCPI \textit{iqstream\_protocol} for both input and output ports. The \textit{iqstream\_protocol} defines an interface of 16-bit complex signed samples. The \verb+data_width+ parameter may be used to reduce the worker's internal data width to less than 16-bits.
\end{flushleft}

\section*{Theory}
\begin{flushleft}
The circuit is based upon Richard G. Lyons' ``Understanding Digital Signal Processing, Third Edition" Automatic Gain Control (AGC) circuit found on Page 783. The text may also be found online here: \href{http://www.embedded.com/design/other/4214571/A-simple-way-to-add-AGC-to-your-communications-receiver-design-}{DSP-Tricks-A simple way to add AGC to your communications receiver design}. Lyons' circuit in Figure 13-76a implements the AGC function with a feedback loop on y(n) that consists of a magnitude operation to remove the sign, a comparator against the reference level ``ref", a multiplier that uses ``mu" to control the amplitude of the feedback signal (and thus the response time), and finally an accumulator. This implementation uses a peak detector in place of Lyons' simple magnitude operation. From Lyons: ``The process is a nonlinear, time-varying, signal-dependent feedback system. As such, it's highly resistant to normal time-domain or z-domain analysis. This is why AGC analysis is empirical rather than mathematical ..."
\end{flushleft}

\section*{Block Diagrams}
\subsection*{Top level}
\begin{center}
	\begin{tikzpicture}[% List of styles applied to all, to override specify on a case-by-case
			every node/.style={
				align=center,  		% use this so that the "\\" for line break works
				minimum size=2cm	% creates space above and below text in rectangle
			},
			every edge/.style={draw,thick}
		]
		\node[rectangle,ultra thick,draw=black,fill=blue](R2){\Comp};
		\node[rectangle,draw=white,fill=white](R3)[left= of R2]{``in" \\ Signed complex samples};
		\node[rectangle,draw=white,fill=white](R4)[right= of R2]{``out" \\ Signed complex samples};
		\node[rectangle,draw=white,fill=white](R5)[above= of R2]{hold, ref, mu, messageSize};
		\path[->]
		(R3)edge []	node [] {} (R2)
		(R2)edge []	node [] {} (R4)
		(R2)edge []	node [] {} (R5)
		(R5)edge []	node [] {} (R2)
		;
	\end{tikzpicture}
\end{center}\pagebreak

%\subsection*{State Machine}
%\begin{flushleft}
%\end{flushleft}

\section*{Source Dependencies}
%\subsection*{\comp.rcc}
\subsection*{\comp.hdl}
\begin{itemize}
	\item training\_project/hdl/primitives/prims/prims\_pkg.vhd
		\subitem training\_project/hdl/primitives/prims/agc/src/agc.vhd
\end{itemize}

\begin{landscape}
  \input{component_spec_properties.inc} % it is recommended to NOT remove this line

  \input{worker_properties.inc} % it is recommended to NOT remove this line

  \input{component_ports.inc} % it is recommended to NOT remove this line

  \input{worker_interfaces.inc} % it is recommended to NOT remove this line
\end{landscape}

\section*{Control Timing and Signals}
%\subsection*{\comp.hdl}
\begin{flushleft}
The {\Comp} worker uses the clock from the Control Plane and standard Control Plane signals.
\end{flushleft}

\section*{Performance and Resource Utilization}
%\subsubsection*{\comp.rcc}
%\subsubsection*{\comp.hdl}

\section*{Test and Verification}
\begin{flushleft}
\begin{flushleft}
	A single test case is implemented to validate the {\Comp} component. An input file is generated with a single tone at Fs/16 Hz, where Fs = 100 Hz, but applies 20\% of the maximum amplitude to the first quarter of the file, 90\% maximum amplitude to the second quarter of the file, 20\% maximum amplitude to the third quarter of the file, and 30\% maximum amplitude to the fourth quarter of the file. The complex waveform is then scaled to fixed-point signed 16-bit integers. Time and frequency domain plots may be viewed in Figures \ref{fig:in_time_tone} and \ref{fig:in_freq_tone} below, respectively.
\end{flushleft}

	\begin{figure}[ht]
		\centering
		\begin{minipage}{.5\textwidth}
			\centering\includegraphics[width=1.0\linewidth]
			{input_time}
			\captionof{figure}{Time Domain Tone}
			\label{fig:in_time_tone}
		\end{minipage}%
		\begin{minipage}{.5\textwidth}
			\centering\includegraphics[width=1.0\linewidth]
			{input_freq}
			\captionof{figure}{Frequency Domain Tone}
			\label{fig:in_freq_tone}
		\end{minipage}
	\end{figure}

\begin{flushleft}
	For verification, the output file is first checked that the data is not all zero, and is then checked for the expected length of 32,768 complex samples. Once these quick checks are made a floating-point python implementation of the AGC is performed on the input data, which is then compared sample-by-sample to the output data. Figures \ref{fig:out_time_tone} and \ref{fig:out_freq_tone} depict the output of the {\Comp} worker.
\end{flushleft}

	\begin{figure}[ht]
		\centering
		\begin{minipage}{.5\textwidth}
			\centering\includegraphics[width=1.0\linewidth]
			{output_time}
			\captionof{figure}{Time Domain Tones with AGC}
			\label{fig:out_time_tone}
		\end{minipage}%
		\begin{minipage}{.5\textwidth}
			\centering\includegraphics[width=1.0\linewidth]
			{output_freq}
			\captionof{figure}{Frequency Domain Tones with AGC}
			\label{fig:out_freq_tone}
		\end{minipage}
	\end{figure}

\newpage
\end{flushleft}

\section*{References}
(1) Richard G. Lyons. \textit{Understanding Digital Signal Processing.} Third Edition. Pearson Education, Inc., Boston. 2001. \\
(2) Richard G. Lyons. (2011, March 29). \textit{A simple way to add AGC to your communications receiver design.} Retrieved from http://www.embedded.com/design/other/4214571/A-simple-way-to-add-AGC-to-your-communications-receiver-design-.
